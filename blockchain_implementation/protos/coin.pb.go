// Code generated by protoc-gen-go. DO NOT EDIT.
// source: coin.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Maybe look at adding the scripting functionality to
// unlock UTXOs
// Each transaction references as input a UTXO from the existing
// set of UTXOs
// But how does it start? Every client knows about the genesis block
// which when mined introduces new coin from thin air (no inputUTXO)
type Transaction struct {
	// UTXO is a transaction hash and the receiver in that transaction
	// is like the source.
	// Unless it is money creation which we can signify as
	// zeroed bytes for example
	InputUTXO []byte `protobuf:"bytes,1,opt,name=inputUTXO,proto3" json:"inputUTXO,omitempty"`
	// To make life easier for implementing coinbase transactions
	// Lets also include the source pubKey, in theory you don't
	// even need this because the inputUTXO's receiverPubKey
	// is really the source
	SenderPubKey []byte `protobuf:"bytes,2,opt,name=senderPubKey,proto3" json:"senderPubKey,omitempty"`
	// Destination of the UTXO
	ReceiverPubKey []byte `protobuf:"bytes,3,opt,name=receiverPubKey,proto3" json:"receiverPubKey,omitempty"`
	// Ensures the private key associated with the public key in the inputUTXO was actually used to sign this
	// Note the way it really works is there is a locking and unlocking
	// script, but more or less the locking script just contains the pub
	// key of the receiver and to unlock it you provide an unlocking
	// script with a signature signed by the private key associated
	// with that public key
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	Value     uint64 `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	// Height is guaranteed to be unique per miner, in the real bitcoin network this
	// goes in the coinbase script arbirary data section but in general this
	// resolves the issue of identical coinbase transactions for the same miner
	// currently only used for coinbase transactions
	Height               uint64   `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_coin_01cd071e6758d1c1, []int{0}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (dst *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(dst, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetInputUTXO() []byte {
	if m != nil {
		return m.InputUTXO
	}
	return nil
}

func (m *Transaction) GetSenderPubKey() []byte {
	if m != nil {
		return m.SenderPubKey
	}
	return nil
}

func (m *Transaction) GetReceiverPubKey() []byte {
	if m != nil {
		return m.ReceiverPubKey
	}
	return nil
}

func (m *Transaction) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Transaction) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Transaction) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type BlockHeader struct {
	PrevBlockHash []byte `protobuf:"bytes,1,opt,name=prevBlockHash,proto3" json:"prevBlockHash,omitempty"`
	// Used to check whether a transaction is in the block
	// in logarithmic time, AFAIK this is only used in SPV clients
	// So they do not need to download the full blocks
	MerkleRoot           []byte   `protobuf:"bytes,2,opt,name=merkleRoot,proto3" json:"merkleRoot,omitempty"`
	TimeStamp            uint64   `protobuf:"varint,3,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	DifficultyTarget     uint32   `protobuf:"varint,4,opt,name=difficultyTarget,proto3" json:"difficultyTarget,omitempty"`
	Nonce                uint32   `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Height               uint64   `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHeader) Reset()         { *m = BlockHeader{} }
func (m *BlockHeader) String() string { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()    {}
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_coin_01cd071e6758d1c1, []int{1}
}
func (m *BlockHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockHeader.Unmarshal(m, b)
}
func (m *BlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockHeader.Marshal(b, m, deterministic)
}
func (dst *BlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeader.Merge(dst, src)
}
func (m *BlockHeader) XXX_Size() int {
	return xxx_messageInfo_BlockHeader.Size(m)
}
func (m *BlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeader proto.InternalMessageInfo

func (m *BlockHeader) GetPrevBlockHash() []byte {
	if m != nil {
		return m.PrevBlockHash
	}
	return nil
}

func (m *BlockHeader) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

func (m *BlockHeader) GetTimeStamp() uint64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *BlockHeader) GetDifficultyTarget() uint32 {
	if m != nil {
		return m.DifficultyTarget
	}
	return 0
}

func (m *BlockHeader) GetNonce() uint32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BlockHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// Hash of the block is made by hashing the blockheader twice
type Block struct {
	Header               *BlockHeader   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Transactions         []*Transaction `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_coin_01cd071e6758d1c1, []int{2}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (dst *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(dst, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_coin_01cd071e6758d1c1, []int{3}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Hello struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hello) Reset()         { *m = Hello{} }
func (m *Hello) String() string { return proto.CompactTextString(m) }
func (*Hello) ProtoMessage()    {}
func (*Hello) Descriptor() ([]byte, []int) {
	return fileDescriptor_coin_01cd071e6758d1c1, []int{4}
}
func (m *Hello) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hello.Unmarshal(m, b)
}
func (m *Hello) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hello.Marshal(b, m, deterministic)
}
func (dst *Hello) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hello.Merge(dst, src)
}
func (m *Hello) XXX_Size() int {
	return xxx_messageInfo_Hello.Size(m)
}
func (m *Hello) XXX_DiscardUnknown() {
	xxx_messageInfo_Hello.DiscardUnknown(m)
}

var xxx_messageInfo_Hello proto.InternalMessageInfo

type Ack struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_coin_01cd071e6758d1c1, []int{5}
}
func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (dst *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(dst, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

type Account struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_coin_01cd071e6758d1c1, []int{6}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Account.Unmarshal(m, b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Account.Marshal(b, m, deterministic)
}
func (dst *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(dst, src)
}
func (m *Account) XXX_Size() int {
	return xxx_messageInfo_Account.Size(m)
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AccountCreated struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountCreated) Reset()         { *m = AccountCreated{} }
func (m *AccountCreated) String() string { return proto.CompactTextString(m) }
func (*AccountCreated) ProtoMessage()    {}
func (*AccountCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_coin_01cd071e6758d1c1, []int{7}
}
func (m *AccountCreated) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountCreated.Unmarshal(m, b)
}
func (m *AccountCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountCreated.Marshal(b, m, deterministic)
}
func (dst *AccountCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountCreated.Merge(dst, src)
}
func (m *AccountCreated) XXX_Size() int {
	return xxx_messageInfo_AccountCreated.Size(m)
}
func (m *AccountCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountCreated.DiscardUnknown(m)
}

var xxx_messageInfo_AccountCreated proto.InternalMessageInfo

func (m *AccountCreated) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type Balance struct {
	Balance              uint64   `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Balance) Reset()         { *m = Balance{} }
func (m *Balance) String() string { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()    {}
func (*Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_coin_01cd071e6758d1c1, []int{8}
}
func (m *Balance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Balance.Unmarshal(m, b)
}
func (m *Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Balance.Marshal(b, m, deterministic)
}
func (dst *Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balance.Merge(dst, src)
}
func (m *Balance) XXX_Size() int {
	return xxx_messageInfo_Balance.Size(m)
}
func (m *Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_Balance proto.InternalMessageInfo

func (m *Balance) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func init() {
	proto.RegisterType((*Transaction)(nil), "protos.Transaction")
	proto.RegisterType((*BlockHeader)(nil), "protos.BlockHeader")
	proto.RegisterType((*Block)(nil), "protos.Block")
	proto.RegisterType((*Empty)(nil), "protos.Empty")
	proto.RegisterType((*Hello)(nil), "protos.Hello")
	proto.RegisterType((*Ack)(nil), "protos.Ack")
	proto.RegisterType((*Account)(nil), "protos.Account")
	proto.RegisterType((*AccountCreated)(nil), "protos.AccountCreated")
	proto.RegisterType((*Balance)(nil), "protos.Balance")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PeeringClient is the client API for Peering service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeeringClient interface {
	// Could add version exchange during peer connection
	Connect(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*Ack, error)
}

type peeringClient struct {
	cc *grpc.ClientConn
}

func NewPeeringClient(cc *grpc.ClientConn) PeeringClient {
	return &peeringClient{cc}
}

func (c *peeringClient) Connect(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/protos.Peering/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeeringServer is the server API for Peering service.
type PeeringServer interface {
	// Could add version exchange during peer connection
	Connect(context.Context, *Hello) (*Ack, error)
}

func RegisterPeeringServer(s *grpc.Server, srv PeeringServer) {
	s.RegisterService(&_Peering_serviceDesc, srv)
}

func _Peering_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hello)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeeringServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Peering/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeeringServer).Connect(ctx, req.(*Hello))
	}
	return interceptor(ctx, in, info, handler)
}

var _Peering_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Peering",
	HandlerType: (*PeeringServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Peering_Connect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coin.proto",
}

// TransactionsClient is the client API for Transactions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionsClient interface {
	ReceiveTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Empty, error)
	SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Empty, error)
}

type transactionsClient struct {
	cc *grpc.ClientConn
}

func NewTransactionsClient(cc *grpc.ClientConn) TransactionsClient {
	return &transactionsClient{cc}
}

func (c *transactionsClient) ReceiveTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.Transactions/ReceiveTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsClient) SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.Transactions/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionsServer is the server API for Transactions service.
type TransactionsServer interface {
	ReceiveTransaction(context.Context, *Transaction) (*Empty, error)
	SendTransaction(context.Context, *Transaction) (*Empty, error)
}

func RegisterTransactionsServer(s *grpc.Server, srv TransactionsServer) {
	s.RegisterService(&_Transactions_serviceDesc, srv)
}

func _Transactions_ReceiveTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).ReceiveTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Transactions/ReceiveTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).ReceiveTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactions_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Transactions/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).SendTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transactions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Transactions",
	HandlerType: (*TransactionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveTransaction",
			Handler:    _Transactions_ReceiveTransaction_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _Transactions_SendTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coin.proto",
}

// BlocksClient is the client API for Blocks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlocksClient interface {
	ReceiveBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Empty, error)
}

type blocksClient struct {
	cc *grpc.ClientConn
}

func NewBlocksClient(cc *grpc.ClientConn) BlocksClient {
	return &blocksClient{cc}
}

func (c *blocksClient) ReceiveBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.Blocks/ReceiveBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlocksServer is the server API for Blocks service.
type BlocksServer interface {
	ReceiveBlock(context.Context, *Block) (*Empty, error)
}

func RegisterBlocksServer(s *grpc.Server, srv BlocksServer) {
	s.RegisterService(&_Blocks_serviceDesc, srv)
}

func _Blocks_ReceiveBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlocksServer).ReceiveBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Blocks/ReceiveBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlocksServer).ReceiveBlock(ctx, req.(*Block))
	}
	return interceptor(ctx, in, info, handler)
}

var _Blocks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Blocks",
	HandlerType: (*BlocksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveBlock",
			Handler:    _Blocks_ReceiveBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coin.proto",
}

// StateClient is the client API for State service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StateClient interface {
	// Could be a huge number of blocks and transactions
	// lets use a stream
	GetTransactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (State_GetTransactionsClient, error)
	GetBlocks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (State_GetBlocksClient, error)
}

type stateClient struct {
	cc *grpc.ClientConn
}

func NewStateClient(cc *grpc.ClientConn) StateClient {
	return &stateClient{cc}
}

func (c *stateClient) GetTransactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (State_GetTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_State_serviceDesc.Streams[0], "/protos.State/GetTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateGetTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type State_GetTransactionsClient interface {
	Recv() (*Transaction, error)
	grpc.ClientStream
}

type stateGetTransactionsClient struct {
	grpc.ClientStream
}

func (x *stateGetTransactionsClient) Recv() (*Transaction, error) {
	m := new(Transaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stateClient) GetBlocks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (State_GetBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_State_serviceDesc.Streams[1], "/protos.State/GetBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateGetBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type State_GetBlocksClient interface {
	Recv() (*Block, error)
	grpc.ClientStream
}

type stateGetBlocksClient struct {
	grpc.ClientStream
}

func (x *stateGetBlocksClient) Recv() (*Block, error) {
	m := new(Block)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StateServer is the server API for State service.
type StateServer interface {
	// Could be a huge number of blocks and transactions
	// lets use a stream
	GetTransactions(*Empty, State_GetTransactionsServer) error
	GetBlocks(*Empty, State_GetBlocksServer) error
}

func RegisterStateServer(s *grpc.Server, srv StateServer) {
	s.RegisterService(&_State_serviceDesc, srv)
}

func _State_GetTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateServer).GetTransactions(m, &stateGetTransactionsServer{stream})
}

type State_GetTransactionsServer interface {
	Send(*Transaction) error
	grpc.ServerStream
}

type stateGetTransactionsServer struct {
	grpc.ServerStream
}

func (x *stateGetTransactionsServer) Send(m *Transaction) error {
	return x.ServerStream.SendMsg(m)
}

func _State_GetBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateServer).GetBlocks(m, &stateGetBlocksServer{stream})
}

type State_GetBlocksServer interface {
	Send(*Block) error
	grpc.ServerStream
}

type stateGetBlocksServer struct {
	grpc.ServerStream
}

func (x *stateGetBlocksServer) Send(m *Block) error {
	return x.ServerStream.SendMsg(m)
}

var _State_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.State",
	HandlerType: (*StateServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTransactions",
			Handler:       _State_GetTransactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBlocks",
			Handler:       _State_GetBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "coin.proto",
}

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletClient interface {
	NewAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*AccountCreated, error)
	GetBalance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Balance, error)
	GetAddress(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AccountCreated, error)
}

type walletClient struct {
	cc *grpc.ClientConn
}

func NewWalletClient(cc *grpc.ClientConn) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) NewAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*AccountCreated, error) {
	out := new(AccountCreated)
	err := c.cc.Invoke(ctx, "/protos.Wallet/NewAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBalance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Balance, error) {
	out := new(Balance)
	err := c.cc.Invoke(ctx, "/protos.Wallet/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAddress(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AccountCreated, error) {
	out := new(AccountCreated)
	err := c.cc.Invoke(ctx, "/protos.Wallet/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
type WalletServer interface {
	NewAccount(context.Context, *Account) (*AccountCreated, error)
	GetBalance(context.Context, *Empty) (*Balance, error)
	GetAddress(context.Context, *Empty) (*AccountCreated, error)
}

func RegisterWalletServer(s *grpc.Server, srv WalletServer) {
	s.RegisterService(&_Wallet_serviceDesc, srv)
}

func _Wallet_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Wallet/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).NewAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Wallet/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBalance(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Wallet/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAddress(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wallet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewAccount",
			Handler:    _Wallet_NewAccount_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Wallet_GetBalance_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _Wallet_GetAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coin.proto",
}

// MinerClient is the client API for Miner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MinerClient interface {
	StartMining(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StopMining(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type minerClient struct {
	cc *grpc.ClientConn
}

func NewMinerClient(cc *grpc.ClientConn) MinerClient {
	return &minerClient{cc}
}

func (c *minerClient) StartMining(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.Miner/StartMining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerClient) StopMining(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.Miner/StopMining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinerServer is the server API for Miner service.
type MinerServer interface {
	StartMining(context.Context, *Empty) (*Empty, error)
	StopMining(context.Context, *Empty) (*Empty, error)
}

func RegisterMinerServer(s *grpc.Server, srv MinerServer) {
	s.RegisterService(&_Miner_serviceDesc, srv)
}

func _Miner_StartMining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerServer).StartMining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Miner/StartMining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerServer).StartMining(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Miner_StopMining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerServer).StopMining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Miner/StopMining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerServer).StopMining(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Miner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Miner",
	HandlerType: (*MinerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartMining",
			Handler:    _Miner_StartMining_Handler,
		},
		{
			MethodName: "StopMining",
			Handler:    _Miner_StopMining_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coin.proto",
}

func init() { proto.RegisterFile("coin.proto", fileDescriptor_coin_01cd071e6758d1c1) }

var fileDescriptor_coin_01cd071e6758d1c1 = []byte{
	// 594 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0xdb, 0x38, 0x56, 0x27, 0x49, 0x8b, 0x06, 0x54, 0x59, 0x11, 0xa0, 0xca, 0x20, 0xa8,
	0x0a, 0x8d, 0x90, 0x11, 0x2a, 0x70, 0x6b, 0x2b, 0xd4, 0x4a, 0xa8, 0x50, 0x39, 0x45, 0x70, 0xdd,
	0xda, 0xd3, 0x74, 0x55, 0x67, 0x37, 0xac, 0xd7, 0x45, 0x3d, 0xf3, 0x33, 0xfc, 0x07, 0x47, 0x7e,
	0x0a, 0x79, 0xd7, 0x4e, 0xec, 0xb4, 0x91, 0xe0, 0x94, 0x9d, 0xe7, 0x37, 0x3b, 0xef, 0xed, 0x1b,
	0x05, 0x20, 0x96, 0x5c, 0x0c, 0xa7, 0x4a, 0x6a, 0x89, 0x1d, 0xf3, 0x93, 0x05, 0xbf, 0x1d, 0xe8,
	0x9e, 0x29, 0x26, 0x32, 0x16, 0x6b, 0x2e, 0x05, 0x3e, 0x84, 0x35, 0x2e, 0xa6, 0xb9, 0xfe, 0x72,
	0xf6, 0xed, 0xb3, 0xef, 0x6c, 0x39, 0xdb, 0xbd, 0x68, 0x0e, 0x60, 0x00, 0xbd, 0x8c, 0x44, 0x42,
	0xea, 0x34, 0x3f, 0xff, 0x48, 0x37, 0xfe, 0x8a, 0x21, 0x34, 0x30, 0x7c, 0x06, 0xeb, 0x8a, 0x62,
	0xe2, 0xd7, 0x33, 0xd6, 0xaa, 0x61, 0x2d, 0xa0, 0xc5, 0xa4, 0x8c, 0x8f, 0x05, 0xd3, 0xb9, 0x22,
	0xbf, 0x6d, 0x27, 0xcd, 0x00, 0x7c, 0x00, 0xee, 0x35, 0x4b, 0x73, 0xf2, 0xdd, 0x2d, 0x67, 0xbb,
	0x1d, 0xd9, 0x02, 0x37, 0xa1, 0x73, 0x49, 0x7c, 0x7c, 0xa9, 0xfd, 0x8e, 0x81, 0xcb, 0x2a, 0xf8,
	0xe3, 0x40, 0xf7, 0x20, 0x95, 0xf1, 0xd5, 0x31, 0xb1, 0x84, 0x14, 0x3e, 0x85, 0xfe, 0x54, 0xd1,
	0xb5, 0x85, 0x58, 0x76, 0x59, 0x3a, 0x69, 0x82, 0xf8, 0x18, 0x60, 0x42, 0xea, 0x2a, 0xa5, 0x48,
	0x4a, 0x5d, 0x7a, 0xa9, 0x21, 0x85, 0x42, 0xcd, 0x27, 0x34, 0xd2, 0x6c, 0x32, 0x35, 0x26, 0xda,
	0xd1, 0x1c, 0xc0, 0x1d, 0xb8, 0x97, 0xf0, 0x8b, 0x0b, 0x1e, 0xe7, 0xa9, 0xbe, 0x39, 0x63, 0x6a,
	0x4c, 0xda, 0xd8, 0xe8, 0x47, 0xb7, 0xf0, 0xc2, 0x8d, 0x90, 0x22, 0xb6, 0x6e, 0xfa, 0x91, 0x2d,
	0x96, 0xba, 0x99, 0x80, 0x6b, 0x44, 0xe2, 0x8b, 0x82, 0x50, 0x18, 0x32, 0xfa, 0xbb, 0xe1, 0x7d,
	0x1b, 0x5e, 0x36, 0xac, 0x79, 0x8d, 0x4a, 0x0a, 0xee, 0x41, 0x4f, 0xcf, 0x83, 0xcc, 0xfc, 0x95,
	0xad, 0xd5, 0x7a, 0x4b, 0x2d, 0xe4, 0xa8, 0x41, 0x0c, 0x3c, 0x70, 0x3f, 0x4c, 0xa6, 0xfa, 0xa6,
	0x38, 0x1c, 0x53, 0x9a, 0xca, 0xc0, 0x85, 0xd5, 0xfd, 0xf8, 0x2a, 0x78, 0x04, 0xde, 0x7e, 0x1c,
	0xcb, 0x5c, 0x68, 0x44, 0x68, 0x0b, 0x36, 0x21, 0xa3, 0x63, 0x2d, 0x32, 0xe7, 0x60, 0x07, 0xd6,
	0xcb, 0xcf, 0x87, 0x8a, 0x98, 0xa6, 0x04, 0x7d, 0xf0, 0x58, 0x92, 0x28, 0xca, 0xb2, 0x92, 0x58,
	0x95, 0xc1, 0x13, 0xf0, 0x0e, 0x58, 0xca, 0x0a, 0xd7, 0x3e, 0x78, 0xe7, 0xf6, 0x68, 0x48, 0xed,
	0xa8, 0x2a, 0xc3, 0x10, 0xbc, 0x53, 0x22, 0xc5, 0xc5, 0x18, 0x9f, 0x83, 0x77, 0x28, 0x85, 0xa0,
	0x58, 0x63, 0xbf, 0x72, 0x60, 0xb4, 0x0d, 0xba, 0x55, 0x59, 0x28, 0x6c, 0x85, 0x3f, 0x1d, 0xe8,
	0xd5, 0xac, 0x65, 0xf8, 0x1e, 0x30, 0xb2, 0x8b, 0x56, 0x5f, 0xeb, 0xbb, 0x9e, 0x61, 0x30, 0xbb,
	0xd9, 0xda, 0x6f, 0xe1, 0x1e, 0x6c, 0x8c, 0x48, 0x24, 0xff, 0xdd, 0x18, 0xbe, 0x85, 0x8e, 0x89,
	0x24, 0xc3, 0x21, 0xf4, 0xca, 0xf1, 0x36, 0xc2, 0x7e, 0x23, 0xb2, 0xdb, 0x9d, 0xdf, 0xc1, 0x1d,
	0x69, 0xa6, 0x09, 0xdf, 0xc1, 0xc6, 0x11, 0xe9, 0x86, 0x95, 0x26, 0x79, 0x70, 0x97, 0x94, 0xa0,
	0xf5, 0xca, 0xc1, 0x5d, 0x58, 0x3b, 0x22, 0x5d, 0x0a, 0x58, 0x68, 0x6a, 0xce, 0x2f, 0xe8, 0xe1,
	0x2f, 0x07, 0x3a, 0x5f, 0x59, 0x9a, 0x92, 0xc6, 0x3d, 0x80, 0x4f, 0xf4, 0xa3, 0x0a, 0x79, 0x63,
	0xfe, 0xb4, 0x06, 0x18, 0x6c, 0x2e, 0x00, 0x65, 0xce, 0x41, 0x0b, 0x87, 0x00, 0xc5, 0xc8, 0x32,
	0xd2, 0x85, 0x99, 0xb3, 0x7b, 0xca, 0xef, 0x41, 0x0b, 0xdf, 0x18, 0xfe, 0xbe, 0xdd, 0x86, 0x45,
	0xfe, 0xd2, 0x31, 0x61, 0x02, 0xee, 0x09, 0x17, 0xa4, 0x70, 0x17, 0xba, 0x23, 0xcd, 0x94, 0x3e,
	0xe1, 0xa2, 0x58, 0x8f, 0x65, 0x26, 0xab, 0x20, 0x5f, 0x02, 0x8c, 0xb4, 0x9c, 0xfe, 0x1b, 0xfb,
	0xdc, 0xfe, 0x17, 0xbe, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x88, 0xca, 0x90, 0x20, 0x05,
	0x00, 0x00,
}
