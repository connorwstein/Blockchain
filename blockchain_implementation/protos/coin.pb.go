// Code generated by protoc-gen-go. DO NOT EDIT.
// source: coin.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Maybe look at adding the scripting functionality to
// unlock UTXOs
// Each transaction references as input a UTXO from the existing
// set of UTXOs
// But how does it start? Every client knows about the genesis block
// which when mined introduces new coin from thin air (no inputUTXO)
type Transaction struct {
	// UTXO is a transaction hash
	// Unless it is money creation which we can signify as
	// zeroed bytes for example
	InputUTXO []byte `protobuf:"bytes,1,opt,name=inputUTXO,proto3" json:"inputUTXO,omitempty"`
	// Pub key associated with source account
	// account must be part of the UTXO
	// bytes senderPubKey = 2;
	// Destination of the UTXO
	ReceiverPubKey []byte `protobuf:"bytes,3,opt,name=receiverPubKey,proto3" json:"receiverPubKey,omitempty"`
	// Ensures the private key associated with the public key in the inputUTXO was actually used to sign this
	Signature            []byte   `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	Value                uint64   `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_coin_a41d8876664cb0ed, []int{0}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (dst *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(dst, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetInputUTXO() []byte {
	if m != nil {
		return m.InputUTXO
	}
	return nil
}

func (m *Transaction) GetReceiverPubKey() []byte {
	if m != nil {
		return m.ReceiverPubKey
	}
	return nil
}

func (m *Transaction) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Transaction) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type BlockHeader struct {
	PrevBlockHash        []byte   `protobuf:"bytes,1,opt,name=prevBlockHash,proto3" json:"prevBlockHash,omitempty"`
	MerkleRoot           []byte   `protobuf:"bytes,2,opt,name=merkleRoot,proto3" json:"merkleRoot,omitempty"`
	TimeStamp            uint32   `protobuf:"varint,3,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	DifficultyTarget     uint32   `protobuf:"varint,4,opt,name=difficultyTarget,proto3" json:"difficultyTarget,omitempty"`
	Nonce                uint32   `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Height               uint64   `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHeader) Reset()         { *m = BlockHeader{} }
func (m *BlockHeader) String() string { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()    {}
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_coin_a41d8876664cb0ed, []int{1}
}
func (m *BlockHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockHeader.Unmarshal(m, b)
}
func (m *BlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockHeader.Marshal(b, m, deterministic)
}
func (dst *BlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeader.Merge(dst, src)
}
func (m *BlockHeader) XXX_Size() int {
	return xxx_messageInfo_BlockHeader.Size(m)
}
func (m *BlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeader proto.InternalMessageInfo

func (m *BlockHeader) GetPrevBlockHash() []byte {
	if m != nil {
		return m.PrevBlockHash
	}
	return nil
}

func (m *BlockHeader) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

func (m *BlockHeader) GetTimeStamp() uint32 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *BlockHeader) GetDifficultyTarget() uint32 {
	if m != nil {
		return m.DifficultyTarget
	}
	return 0
}

func (m *BlockHeader) GetNonce() uint32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BlockHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// Hash of the block is made by hashing the blockheader twice
type Block struct {
	Header               *BlockHeader   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Transactions         []*Transaction `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_coin_a41d8876664cb0ed, []int{2}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (dst *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(dst, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_coin_a41d8876664cb0ed, []int{3}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Hello struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hello) Reset()         { *m = Hello{} }
func (m *Hello) String() string { return proto.CompactTextString(m) }
func (*Hello) ProtoMessage()    {}
func (*Hello) Descriptor() ([]byte, []int) {
	return fileDescriptor_coin_a41d8876664cb0ed, []int{4}
}
func (m *Hello) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hello.Unmarshal(m, b)
}
func (m *Hello) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hello.Marshal(b, m, deterministic)
}
func (dst *Hello) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hello.Merge(dst, src)
}
func (m *Hello) XXX_Size() int {
	return xxx_messageInfo_Hello.Size(m)
}
func (m *Hello) XXX_DiscardUnknown() {
	xxx_messageInfo_Hello.DiscardUnknown(m)
}

var xxx_messageInfo_Hello proto.InternalMessageInfo

type Ack struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_coin_a41d8876664cb0ed, []int{5}
}
func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (dst *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(dst, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

type Account struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_coin_a41d8876664cb0ed, []int{6}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Account.Unmarshal(m, b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Account.Marshal(b, m, deterministic)
}
func (dst *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(dst, src)
}
func (m *Account) XXX_Size() int {
	return xxx_messageInfo_Account.Size(m)
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Transaction)(nil), "protos.Transaction")
	proto.RegisterType((*BlockHeader)(nil), "protos.BlockHeader")
	proto.RegisterType((*Block)(nil), "protos.Block")
	proto.RegisterType((*Empty)(nil), "protos.Empty")
	proto.RegisterType((*Hello)(nil), "protos.Hello")
	proto.RegisterType((*Ack)(nil), "protos.Ack")
	proto.RegisterType((*Account)(nil), "protos.Account")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PeeringClient is the client API for Peering service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeeringClient interface {
	// Could add version exchange during peer connection
	Connect(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*Ack, error)
}

type peeringClient struct {
	cc *grpc.ClientConn
}

func NewPeeringClient(cc *grpc.ClientConn) PeeringClient {
	return &peeringClient{cc}
}

func (c *peeringClient) Connect(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/protos.Peering/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeeringServer is the server API for Peering service.
type PeeringServer interface {
	// Could add version exchange during peer connection
	Connect(context.Context, *Hello) (*Ack, error)
}

func RegisterPeeringServer(s *grpc.Server, srv PeeringServer) {
	s.RegisterService(&_Peering_serviceDesc, srv)
}

func _Peering_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hello)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeeringServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Peering/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeeringServer).Connect(ctx, req.(*Hello))
	}
	return interceptor(ctx, in, info, handler)
}

var _Peering_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Peering",
	HandlerType: (*PeeringServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Peering_Connect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coin.proto",
}

// TransactionsClient is the client API for Transactions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionsClient interface {
	ReceiveTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Empty, error)
	SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Empty, error)
}

type transactionsClient struct {
	cc *grpc.ClientConn
}

func NewTransactionsClient(cc *grpc.ClientConn) TransactionsClient {
	return &transactionsClient{cc}
}

func (c *transactionsClient) ReceiveTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.Transactions/ReceiveTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsClient) SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.Transactions/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionsServer is the server API for Transactions service.
type TransactionsServer interface {
	ReceiveTransaction(context.Context, *Transaction) (*Empty, error)
	SendTransaction(context.Context, *Transaction) (*Empty, error)
}

func RegisterTransactionsServer(s *grpc.Server, srv TransactionsServer) {
	s.RegisterService(&_Transactions_serviceDesc, srv)
}

func _Transactions_ReceiveTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).ReceiveTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Transactions/ReceiveTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).ReceiveTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactions_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Transactions/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).SendTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transactions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Transactions",
	HandlerType: (*TransactionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveTransaction",
			Handler:    _Transactions_ReceiveTransaction_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _Transactions_SendTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coin.proto",
}

// StateClient is the client API for State service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StateClient interface {
	// Could be a huge number of blocks and transactions
	// lets use a stream
	GetTransactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (State_GetTransactionsClient, error)
}

type stateClient struct {
	cc *grpc.ClientConn
}

func NewStateClient(cc *grpc.ClientConn) StateClient {
	return &stateClient{cc}
}

func (c *stateClient) GetTransactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (State_GetTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_State_serviceDesc.Streams[0], "/protos.State/GetTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateGetTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type State_GetTransactionsClient interface {
	Recv() (*Transaction, error)
	grpc.ClientStream
}

type stateGetTransactionsClient struct {
	grpc.ClientStream
}

func (x *stateGetTransactionsClient) Recv() (*Transaction, error) {
	m := new(Transaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StateServer is the server API for State service.
type StateServer interface {
	// Could be a huge number of blocks and transactions
	// lets use a stream
	GetTransactions(*Empty, State_GetTransactionsServer) error
}

func RegisterStateServer(s *grpc.Server, srv StateServer) {
	s.RegisterService(&_State_serviceDesc, srv)
}

func _State_GetTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateServer).GetTransactions(m, &stateGetTransactionsServer{stream})
}

type State_GetTransactionsServer interface {
	Send(*Transaction) error
	grpc.ServerStream
}

type stateGetTransactionsServer struct {
	grpc.ServerStream
}

func (x *stateGetTransactionsServer) Send(m *Transaction) error {
	return x.ServerStream.SendMsg(m)
}

var _State_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.State",
	HandlerType: (*StateServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTransactions",
			Handler:       _State_GetTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "coin.proto",
}

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletClient interface {
	NewAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Empty, error)
}

type walletClient struct {
	cc *grpc.ClientConn
}

func NewWalletClient(cc *grpc.ClientConn) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) NewAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.Wallet/NewAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
type WalletServer interface {
	NewAccount(context.Context, *Account) (*Empty, error)
}

func RegisterWalletServer(s *grpc.Server, srv WalletServer) {
	s.RegisterService(&_Wallet_serviceDesc, srv)
}

func _Wallet_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Wallet/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).NewAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wallet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewAccount",
			Handler:    _Wallet_NewAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coin.proto",
}

func init() { proto.RegisterFile("coin.proto", fileDescriptor_coin_a41d8876664cb0ed) }

var fileDescriptor_coin_a41d8876664cb0ed = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xc1, 0x8b, 0xd3, 0x40,
	0x14, 0xc6, 0x9b, 0x6d, 0xd3, 0xb2, 0xaf, 0x8d, 0x95, 0xa7, 0x48, 0x28, 0x2a, 0x25, 0x88, 0x2e,
	0x0a, 0x45, 0xe2, 0x61, 0xd5, 0xdb, 0xae, 0x88, 0x0b, 0x82, 0x2e, 0xd3, 0x8a, 0x5e, 0x67, 0xa7,
	0x6f, 0xdb, 0xa1, 0xc9, 0x4c, 0x98, 0x4c, 0x2a, 0x3d, 0x7b, 0xf0, 0x8f, 0xf3, 0x9f, 0x92, 0xcc,
	0xb4, 0xdb, 0xd4, 0xdd, 0x8b, 0xa7, 0xcc, 0xfb, 0xf8, 0xe6, 0x7b, 0xbf, 0x97, 0x97, 0x00, 0x08,
	0x2d, 0xd5, 0xa4, 0x30, 0xda, 0x6a, 0xec, 0xba, 0x47, 0x99, 0xfc, 0x0e, 0xa0, 0x3f, 0x33, 0x5c,
	0x95, 0x5c, 0x58, 0xa9, 0x15, 0x3e, 0x86, 0x63, 0xa9, 0x8a, 0xca, 0x7e, 0x9b, 0xfd, 0xf8, 0x1a,
	0x07, 0xe3, 0xe0, 0x64, 0xc0, 0xf6, 0x02, 0x3e, 0x87, 0x7b, 0x86, 0x04, 0xc9, 0x35, 0x99, 0xcb,
	0xea, 0xea, 0x33, 0x6d, 0xe2, 0xb6, 0xb3, 0xfc, 0xa3, 0xd6, 0x29, 0xa5, 0x5c, 0x28, 0x6e, 0x2b,
	0x43, 0x71, 0xc7, 0xa7, 0xdc, 0x08, 0xf8, 0x10, 0xc2, 0x35, 0xcf, 0x2a, 0x8a, 0xc3, 0x71, 0x70,
	0xd2, 0x61, 0xbe, 0x48, 0xfe, 0x04, 0xd0, 0x3f, 0xcf, 0xb4, 0x58, 0x5d, 0x10, 0x9f, 0x93, 0xc1,
	0x67, 0x10, 0x15, 0x86, 0xd6, 0x5e, 0xe2, 0xe5, 0x72, 0x4b, 0x73, 0x28, 0xe2, 0x53, 0x80, 0x9c,
	0xcc, 0x2a, 0x23, 0xa6, 0xb5, 0x8d, 0x8f, 0x9c, 0xa5, 0xa1, 0xd4, 0x24, 0x56, 0xe6, 0x34, 0xb5,
	0x3c, 0x2f, 0x1c, 0x6c, 0xc4, 0xf6, 0x02, 0xbe, 0x84, 0xfb, 0x73, 0x79, 0x7d, 0x2d, 0x45, 0x95,
	0xd9, 0xcd, 0x8c, 0x9b, 0x05, 0x59, 0x87, 0x1b, 0xb1, 0x5b, 0x7a, 0x4d, 0xad, 0xb4, 0x12, 0x9e,
	0x3a, 0x62, 0xbe, 0xc0, 0x47, 0xd0, 0x5d, 0x92, 0x5c, 0x2c, 0x6d, 0xdc, 0x75, 0xc3, 0x6c, 0xab,
	0x24, 0x87, 0xd0, 0x41, 0xe2, 0xab, 0xda, 0x50, 0x0f, 0xe4, 0xf8, 0xfb, 0xe9, 0x03, 0xbf, 0x80,
	0x72, 0xd2, 0x98, 0x95, 0x6d, 0x2d, 0x78, 0x0a, 0x03, 0xbb, 0x5f, 0x46, 0x19, 0x1f, 0x8d, 0xdb,
	0xcd, 0x2b, 0x8d, 0x45, 0xb1, 0x03, 0x63, 0xd2, 0x83, 0xf0, 0x63, 0x5e, 0xd8, 0x4d, 0x7d, 0xb8,
	0xa0, 0x2c, 0xd3, 0x49, 0x08, 0xed, 0x33, 0xb1, 0x4a, 0x9e, 0x40, 0xef, 0x4c, 0x08, 0x5d, 0x29,
	0x8b, 0x08, 0x1d, 0xc5, 0x73, 0x72, 0x1c, 0xc7, 0xcc, 0x9d, 0xd3, 0x14, 0x7a, 0x97, 0x44, 0x46,
	0xaa, 0x05, 0xbe, 0x80, 0xde, 0x07, 0xad, 0x14, 0x09, 0x8b, 0xd1, 0xae, 0xa1, 0x8b, 0x1a, 0xf5,
	0x77, 0x65, 0x1d, 0xd8, 0x4a, 0x7f, 0x05, 0x30, 0x68, 0x90, 0x94, 0xf8, 0x1e, 0x90, 0xf9, 0xfd,
	0x37, 0xbf, 0xa4, 0xbb, 0xa8, 0x47, 0x37, 0xc9, 0x9e, 0xb6, 0x85, 0xa7, 0x30, 0x9c, 0x92, 0x9a,
	0xff, 0xf7, 0xc5, 0xf4, 0x1c, 0xc2, 0xa9, 0xe5, 0x96, 0xf0, 0x1d, 0x0c, 0x3f, 0x91, 0x3d, 0x00,
	0x3a, 0x34, 0x8f, 0xee, 0x0a, 0x4c, 0x5a, 0xaf, 0x83, 0xf4, 0x2d, 0x74, 0xbf, 0xf3, 0x2c, 0x23,
	0x8b, 0x13, 0x80, 0x2f, 0xf4, 0x73, 0xf7, 0xa6, 0x86, 0xfb, 0x81, 0x9d, 0x70, 0xab, 0xfb, 0x95,
	0xff, 0x7d, 0xde, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x68, 0x4a, 0xb4, 0x46, 0x53, 0x03, 0x00,
	0x00,
}
